// Mapping URLs

	1. In the main learning_log project folder, open the file 
	urls.py
	2. To include URLs for a specific application (learning_logs),
	add it under urlpatterns in urls.py in your project folder:

		url(r'', include('learning_logs.urls', namespace='learning_logs')),

	3. Now you need to actually create a learning_logs.urls 
	file. Go into learning_log/learning_logs and create urls.py
	4. Inside urls.py, import the url function from django,
	import the views module, the different urlpatterns that
	can be requested from the learning_logs app, and the 
	actual URL pattern:

		''' Defines URL patterns for learning_logs.'''

		from django.conf.urls import url 

		from . import views 

		urlpatterns = [ 
			# Home page 
			url(r'^$', views.index, name ='index'),
		]

	5. The last bit looks a little funky! It takes three 
	arguments:
		- r'^$' is a regular expression. It defines a specific
		pattern that Django can look for in a URL. The 'r'
		means raw string, and the quotes tell Python where
		the regular expression begins and ends. The '^' tells
		Python to find the beginning of the string, and the
		'$' tells Python to find the end of the string. 
		Basically, this expression tells Python to look for a
		URL with nothing between the beginning / end of URL. 
		- The second argument specifies which view function 
		to call. 
		- The third argument provides the name for the URL
		pattern so you can refer to it in other sections of
		the code. 


// Writing a view

	1. Open up views.py in your learning_logs directory.
		- views.py was created when you typed python manage.py
		startapp 
	2. This is how the view for the home page should be written:

		def index(request):
			'''The home page for Learning Log'''
			return render(request, 'learning_logs/index.html')

	3. Some notes on the above code:
		- When a URL matches the above pattern, Django will 
		look for a function called index() in the views.py file.
		- render() builds the page, and it takes two arguments:
		the original request object and a template it can use
		to build the page. Now we'll write the template.


// Writing a template

	1. Create a folder in your learning_logs directory called
	templates. Then create a folder inside of templates and 
	call it learning_logs. Then create a new file called index.html 
	2. Write your front-end code into index.html! Something like:

		<p>Learning Log</p>

		<p>Learning Log helps you keep track of your learning, for
		any topic you're learning about.</p>


// Building additional pages

	1. Create a template called base.html in the same folder as
	index.html. This will be your "parent template".
	2. Here's an example of code that you can insert into base.html:

		<p>
			<a href="{%url 'learning_logs:index'%}">Learning Log</a>
		</p>

		{% block content %}{% endblock content %}

	3. Some info about the above code:
		- <p> </p> is simply creating a new paragraph.
		- <a href=""> </a> is a link.
		- 'learning_logs:index' links to the stored index file.
		- {%url ''%} generates a link to a specific file.
		- Always include {% block content %}{% endblock content %}
		at the end. It's basically a placeholder.
	4. Now rewrite index.html:

		{% extends "learning_logs/base.html" %}

		{% block content %}
			<p> TEXT
			</p>
		{% endblock content %}

	5. Some info about the above code:
		- {% extends ""%} links to the file it's inhereting from.
		It pulls everything that's contained in the base.html
		template and allows index.html to define what goes in the
		space reserved by the content block. 
		- Everything that we aren't inhereting from the parent file
		goes inside the {% block content %} blocks.
		- {% endcontent %} indicates that we're finished defining 
		the content.


// Building the topics page

	1. Add topics to the list of urls in urls.py:

		# Show all topics.
		url(r'^topics/$', views.topics, name='topics'),

	2. So the above code links to http://localhost:8000/topics/
	3. Now the topics() function needs to retrieve data from 
	the database and send it to the template. Edit views.py:

		from .models import Topic

		def index(request):
			--snip--

		def topics(request):
			'''Show all topics.'''
			topics = Topic.objects.order_by('date_added')
			context = {'topics': topics}
			return render(request, 'learning_logs/topics.html', context)

	4. Some info about the above code: 
		- The first line imports the model associated with the 
		data that you need.
		- The topics() function uses request to recieve from 
		the server.
		- At topics = Topic.objects.order_by('date_added'), you are
		asking for the Topic objects, sorted by the date_added
		attribute. You store the queryset in the topics variable.
		- for context, you are simply defining the context that
		you're going to send to the template. It's a dictionary
		because the keys will be the names you'll use in the dict,
		and the values are the data you need to send to the template.
		- for return render, you are passing the context variable to
		render(), as well as the request object and the path to the
		template.
	5. Make a file called topics.html:

		{% extends "learning_logs/base.html" %}

		{% block content %}

			<p>Topics</p>

			<ul>
				{% for topic in topics %}
				<li>{{ topic }}</li>
			{% empty %}
				<li>No topics have been added yet. </li>
				{% endfor %}
			</ul>

		{% endblock content %}

	6. Some info about the above code: 
		- Use the {% extends "" %} tag to inheret from base.html.
		Then open a content block. 
		- <ul> is a bulleted list.
		- {% for topic in topics} {% endfor %} indicates the end of
		the loop. 
		- To print a variable in a template, wrap the variable name in
		double brackets: {{ topic }}
		- <li> indicates a list item. 
		- {% empty %} tells Django what to do if there are no items
		in a list. In this case, you print a message informing the 
		user that no topics have been added yet. 
		- The last two lines close out the for loop and then closes
		out the bulleted list. 
	7. Modify the base template: 

			<a href="{% url 'learning_logs:index'%}">Learning Log</a> -
			<a href="{% url 'learning_logs:topics'%">Topics</a>

	8. Some info about the above code:
		- Add a dash after the first link.
		- Add a link to the topics page, using the URL template tag.
		It tells Django to generate a link matching the URL pattern
		with the name 'topics' in learning_logs/urls.py


// Create individual topic pages

	1. Go to learning_logs/urls.py:

		# Detail page for a single topic
		url(r'^topics/(?P<topic_id>\d+)/$', views.topic, name='topic')

	2. Some info on the below code (This is stupid complicated btw):
		- r tells Django to interpret as a raw string.
		- /?P<topic_id>\d+)/ matches the integer between two forward 
		slashes and stores the integer value in an argument called
		topic_id.
		- The parentheses captures the value stored in the URL.
		- The ?P<topic_id> stores the matched value in topic_id.
		- The expression \d+ matches any number of digits that appear
		between the forward slashes. 
	3. Now, the topic() function needs to get the topic and its 
	entries from the database. So go to views.py:

		--snip--
		def topic(request, topic_id):
			'''Show a single topic and all its entries.'''
			topic = Topic.objects.get(id=topic_id)
			entries = topic.entry_set.order_by('-date_added')
			context = {'topic': topic, 'entries': entries}
			return render(request, 'learning_logs/topic.html', context)

	4. Some info about the above code:
		- topic_id accepts that weird expression used above. (?P<topic_id>\d+)
		It stopres it in topic_id.
		- For topic =, you use get() to retrieve the topic.
		- For entries =, you get the entries under the topic, and order
		them according to the date they were added with date_added. The
		minus (-) sign simply orders them in reverse order.
		- For context =: Now that you have the topics and entries, 
		you need to store them in the context dictionary.
		- For return render, you are simply sending the context to 
		the template topic.html.
		-NOTE: the code phrases (topic =) and (entries =) are called
		queries. This is because they query the database for specific 
		information. 
	5. Now create the topic template. Open up topic.html:

		{% extends 'learning_logs/base.html'%}

		{% block content %}

			<p>Topic: {{ topic }}</p>

			<p>Entries:</p>
			<ul>
			{% for entry in entries %}
				<li>
					<p>{{ entry.date_added|date:'M d, Y H:i' }} </p>
					<p>{{ entry.text|linebreaks }}</p>
				</li>
			{% empty %}
				<li>
					There are no entries for this topic yet.
				</li>
			{% endfor %}
			</ul>

		{% endblock content %}

	6. Some info about the above code: 
		- You extend to, or inheret, base.html in the first part.
		- for {{ topic }}, you show the topic that's being displayed,
		which is stored in a topic variable. It's available 
		because it's included in the context dictionary.
		- You show a bulleted list to show each of the entries,
		and loop through them.
		- Each bullet has a time stamp and the full text of each
		entry, using date_added and a vertical line. (|).
		- The vertical line represents a template filter, which
		is a function that modifies the value in a template var.
		- The filter date:'M d, Y H:i' shows timestamps in the 
		format January 1, 2015 23:00.
		- The next line shows the entire text.
		- The filter linebreaks ensures linebreaks instead of a
		block of uninterrupted text. 
		- {% empty %} prints a message informing the user that
		no entries have been made. 
	7. Before you can look at the topics page in a browser, you
	need to modify the topics template so each topic links to
	the appropriate page. Open up topics.html:

		--snip--
			{% for topic in topics %}
				<li>
				<a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a>
				</li>
			{% empty %}
		--snip--

	8. Some info about the above code:
		- Use the URL template tag to generate the proper link
		based on the URL pattern in learning_logs with the name
		'topic'.
		- Add the attribute topic.id to the URL template tag
		because the pattern requires a topic_id argument.
		-Now each topic in the list of topics is a link to a 
		topic page.

// Django Template Documentation website:

	https://docs.djangoproject.com/en/1.8/ref/templates/




